MONOLATHIC VS MICROSERVICES:

MONOLATHIC:

->When developing a server-side application you can start it with a modular hexagonal or layered architecture which consists of different types of components:
Presentation
Business logic
Database access
Application integration
->Despite having a logically modular architecture, the application is packaged and deployed as a monolith.
* Benefits of Monolithic Architecture:
Simple to develop.
Simple to test. For example you can implement end-to-end testing by simply launching the application and testing the UI with Selenium.
Simple to deploy. You just have to copy the packaged application to a server.
Simple to scale horizontally by running multiple copies behind a load balancer.
*Drawbacks:
->This simple approach has a limitation in size and complexity.
->Application is too large and complex to fully understand and made changes fast and correctly.
->The size of the application can slow down the start-up time.
->You must redeploy the entire application on each update.
->Impact of a change is usually not very well understood which leads to do extensive manual testing.
->Continuous deployment is difficult.
->Monolithic applications can also be difficult to scale when different modules have conflicting resource requirements.
->Another problem with monolithic applications is reliability. Bug in any module (e.g. memory leak) can potentially bring down the entire process. 
Moreover, since all instances of the application are identical, that bug will impact the availability of the entire application.
->Monolithic applications has a barrier to adopting new technologies. Since changes in frameworks or languages will affect an entire application it is extremely expensive in both time and cost.

MICROSERVICE:

->The idea is to split your application into a set of smaller, interconnected services instead of building a single monolithic application.
 Each microservice is a small application that has its own hexagonal architecture consisting of business logic along with various adapters. 
->The Microservice architecture pattern significantly impacts the relationship between the application and the database. Instead of sharing a single database schema with other services, each service has its own database schema.
 On the one hand, this approach is at odds with the idea of an enterprise-wide data model. Also, it often results in duplication of some data. 
*Benifits:
->It tackles the problem of complexity by decomposing application into a set of manageable services which are much faster to develop, and much easier to understand and maintain.
->It enables each service to be developed independently by a team that is focused on that service.
->It reduces barrier of adopting new technologies since the developers are free to choose whatever technologies make sense for their service and not bounded to the choices made at the start of the project.
->Microservice architecture enables each microservice to be deployed independently. As a result, it makes continuous deployment possible for complex applications.
->Microservice architecture enables each service to be scaled independently.
*Drawbacks:
->Application is too large and complex to fully understand and made changes fast and correctly.
->Because of large file start-up time is more.
->You must redeploy the entire application on each update.